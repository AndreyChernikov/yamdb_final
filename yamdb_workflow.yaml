name: Yamdb app workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.5

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort pytest
        pip install -r requirements.txt
    - name: Test for PEP8 requirements
      # Здесь логичнее разделить проверки по задачам
      run: flake8
    - name: Run pytest for project
      run: |
        echo SECRET_KEY="${{ secrets.SECRET_KEY }}" > .env
        export PYTHONPATH=.
        pytest

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    # Касательно веток - абсолютно согласен. И, по логике, одного условия достаточно, ведь
    # остальные этапы выполняются в зависимости от успешности текущего
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: andyi95/yamdb_final:latest

  deploy:
    name: Deploy images on the destination server
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: Create tar archive
        run: |
          mkdir ../build
#          cp -TR nginx ../build/
#          cp -TR docker-compose.yaml ../build/
          tar -cvf deploy.tar ../nginx .docker-compose.yaml
      - name: copy files with ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "deploy.tar"
          target: "./"
#      - name: executing remote ssh commands to deploy
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USER }}
#          key: ${{ secrets.SSH_KEY }}
#          script: |
#            ls -lta
#            tar -xvf deploy.tar
#            chmod +x .github/scripts/deploy.sh
#            .github/scripts/deploy.sh
  debug:
    needs : deploy
    timeout-minutes: 60
    runs-on: ${{ matrix.machine }}
    container : { image : "${{ matrix.container }}" }
    strategy:
      matrix:
        container: [ "alpine:latest" ]
        machine: [ "ubuntu-latest" ]
    services:
      default:
        image: "nginx:alpine"
        ports: [ "8080:80" ]
    steps:
      - name: checkout
        uses: "actions/checkout@v1"
      # - name : docker compose up
      #   run : "docker-compose up -d"
      - name: machine echo env
        env: { CONTENT: "${{ toJson(env) }}" }
        run: "echo $CONTENT"
      - name: machine echo secrets
        env: { CONTENT: "${{ toJson(secrets) }}" }
        run: "echo $CONTENT"
      - name: machine echo github
        env: { CONTENT: "${{ toJson(github) }}" }
        run: "echo $CONTENT"
      - name: machine echo runner
        env: { CONTENT: "${{ toJson(runner) }}" }
        run: "echo $CONTENT"
      - name: machine echo job
        env: { CONTENT: "${{ toJson(job) }}" }
        run: "echo $CONTENT"
      - name: machine echo strategy
        env: { CONTENT: "${{ toJson(strategy) }}" }
        run: "echo $CONTENT"
      - name: machine echo matrix
        env: { CONTENT: "${{ toJson(matrix) }}" }
        run: "echo $CONTENT"
      - name: machine echo steps
        env: { CONTENT: "${{ toJson(steps) }}" }
        run: "echo $CONTENT"
      - name: machine echo $GITHUB_ACTOR
        run: "echo $GITHUB_ACTOR"
      - name: machine echo $GITHUB_EVENT_NAME
        run: "echo $GITHUB_EVENT_NAME"
      - name: machine echo $GITHUB_ACTIONS
        run: "echo $GITHUB_ACTIONS"
      - name: machine echo $GITHUB_WORKFLOW
        run: "echo $GITHUB_WORKFLOW"
      - name: machine echo $GITHUB_ACTION
        run: "echo $GITHUB_ACTION"
      - name: machine echo $GITHUB_REPOSITORY
        run: "echo $GITHUB_REPOSITORY"
      - name: machine echo $GITHUB_BASE_REF
        run: "echo $GITHUB_BASE_REF"
      - name: machine echo $GITHUB_HEAD_REF
        run: "echo $GITHUB_HEAD_REF"
      - name: machine echo $GITHUB_REF
        run: "echo $GITHUB_REF"
      - name: machine echo $GITHUB_SHA
        run: "echo $GITHUB_SHA"
      - name: machine echo $GITHUB_EVENT_PATH
        run: "echo $GITHUB_EVENT_PATH"
      - name: machine echo $GITHUB_WORKSPACE
        run: "echo $GITHUB_WORKSPACE"
      - name: machine echo $HOME
        run: "echo $HOME"
      - name: container ls $GITHUB_EVENT_PATH
        with: { entrypoint: "/bin/sh" , args: '-c "ls -la $GITHUB_EVENT_PATH"' }
        uses: "docker://alpine:latest"
      - name: container ls $GITHUB_WORKSPACE
        with: { entrypoint: "/bin/sh" , args: '-c "ls -la $GITHUB_WORKSPACE"' }
        uses: "docker://alpine:latest"
      - name: container ls $HOME
        with: { entrypoint: "/bin/sh" , args: '-c "ls -la $HOME"' }
        uses: "docker://alpine:latest"
      - name: machine ls $GITHUB_EVENT_PATH
        run: "ls -la $GITHUB_EVENT_PATH"
      - name: machine ls $GITHUB_WORKSPACE
        run: "ls -la $GITHUB_WORKSPACE"
      - name: machine ls $HOME
        working-directory: "."
        run: "ls -la $HOME"

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} has passed successfully!
